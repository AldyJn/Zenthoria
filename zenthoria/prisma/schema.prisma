// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  teacher
  student
}

enum PowerType {
  grenade
  melee
  super
  class_ability
}

enum Element {
  solar
  arc
  void
  stasis
}

enum AccessoryType {
  helmet
  armor
  weapon
  shader
  emblem
  ghost
}

enum Rarity {
  common
  uncommon
  rare
  legendary
  exotic
}

enum SelectionType {
  random_student
  random_team
  participation
  quiz
  activity
}

enum SelectionMethod {
  wheel
  dice
  cards
  algorithm
}
// Modelo base de usuarios
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

 // Relaciones
  teacher Teacher?
  student Student?
  userCharacters UserCharacter[] 
  
  @@map("users")
}
// Modelo de profesores
model Teacher {
  id          String  @id @default(uuid())
  userId      String  @unique @map("user_id")
  teacherCode String  @unique @map("teacher_code")
  department  String?
  bio         String?
  avatarUrl   String? @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes         Class[]
  randomSelections RandomSelection[]

  @@map("teachers")
}

// Modelo de estudiantes
model Student {
  id          String  @id @default(uuid())
  userId      String  @unique @map("user_id")
  studentCode String  @unique @map("student_code")
  avatarUrl   String? @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments ClassEnrollment[]
  characters  StudentCharacter[]

  @@map("students")
}

// Modelo de clases
model Class {
  id           String    @id @default(uuid())
  teacherId    String    @map("teacher_id")
  name         String
  description  String?
  classCode    String    @unique @map("class_code")
  qrCodeData   String?   @map("qr_code_data")
  startDate    DateTime  @map("start_date")
  endDate      DateTime  @map("end_date")
  isActive     Boolean   @default(true) @map("is_active")
  maxStudents  Int       @default(30) @map("max_students")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relaciones
  teacher          Teacher           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  enrollments      ClassEnrollment[]
  characters       StudentCharacter[]
  randomSelections RandomSelection[]

  @@map("classes")
}

// Modelo de inscripciones a clases
model ClassEnrollment {
  studentId  String   @map("student_id")
  classId    String   @map("class_id")
  enrolledAt DateTime @default(now()) @map("enrolled_at")
  isActive   Boolean  @default(true) @map("is_active")

  // Relaciones
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([studentId, classId])
  @@map("class_enrollments")
}

// Modelo de tipos de personajes
model CharacterType {
  id            String  @id @default(uuid())
  name          String  @unique
  description   String
  baseHealth    Int     @map("base_health")
  baseLight     Int     @map("base_light")
  specialAbility String @map("special_ability")
  imageUrl      String? @map("image_url")
  isActive      Boolean @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relaciones
  characters StudentCharacter[]
  userCharacters UserCharacter[]  // NUEVA RELACIÃ“N
  powers     Power[]
  
  @@map("character_types")
  }

// Modelo de personajes de estudiantes
model StudentCharacter {
  id                   String   @id @default(uuid())
  studentId            String   @map("student_id")
  classId              String   @map("class_id")
  characterTypeId      String   @map("character_type_id")
  characterName        String   @map("character_name")
  level                Int      @default(1)
  experiencePoints     Int      @default(0) @map("experience_points")
  currentHealth        Int      @map("current_health")
  maxHealth            Int      @map("max_health")
  currentLight         Int      @map("current_light")
  maxLight             Int      @map("max_light")
  discipline           Int      @default(0)
  intellect            Int      @default(0)
  strength             Int      @default(0)
  charisma             Int      @default(0)
  avatarCustomization  Json     @map("avatar_customization")
  lastLightRegen       DateTime @default(now()) @map("last_light_regen")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relaciones
  student          Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class            Class             @relation(fields: [classId], references: [id], onDelete: Cascade)
  characterType    CharacterType     @relation(fields: [characterTypeId], references: [id])
  powers           StudentPower[]
  accessories      StudentAccessory[]
  randomSelections RandomSelection[]

  @@unique([studentId, classId])
  @@map("student_characters")
}

// Modelo de poderes
model Power {
  id              String     @id @default(uuid())
  name            String
  description     String
  powerType       PowerType  @map("power_type")
  element         Element
  characterTypeId String?    @map("character_type_id")
  lightCost       Int        @map("light_cost")
  cooldownMinutes Int        @map("cooldown_minutes")
  levelRequired   Int        @map("level_required")
  effects         Json
  imageUrl        String?    @map("image_url")
  isActive        Boolean    @default(true) @map("is_active")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  // Relaciones
  characterType CharacterType? @relation(fields: [characterTypeId], references: [id])
  students      StudentPower[]

  @@map("powers")
}

// Modelo de poderes de estudiantes
model StudentPower {
  studentCharacterId String   @map("student_character_id")
  powerId            String   @map("power_id")
  slotPosition       Int      @map("slot_position")
  isEquipped         Boolean  @default(false) @map("is_equipped")
  unlockedAt         DateTime @default(now()) @map("unlocked_at")

  // Relaciones
  studentCharacter StudentCharacter @relation(fields: [studentCharacterId], references: [id], onDelete: Cascade)
  power            Power            @relation(fields: [powerId], references: [id], onDelete: Cascade)

  @@id([studentCharacterId, powerId])
  @@map("student_powers")
}

// Modelo de accesorios
model Accessory {
  id            String        @id @default(uuid())
  name          String
  description   String
  accessoryType AccessoryType @map("accessory_type")
  rarity        Rarity
  levelRequired Int           @map("level_required")
  cost          Int
  visualEffects Json          @map("visual_effects")
  statBonuses   Json          @map("stat_bonuses")
  imageUrl      String?       @map("image_url")
  isActive      Boolean       @default(true) @map("is_active")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relaciones
  students StudentAccessory[]

  @@map("accessories")
}

// Modelo de accesorios de estudiantes
model StudentAccessory {
  studentCharacterId String        @map("student_character_id")
  accessoryId        String        @map("accessory_id")
  slotType           AccessoryType @map("slot_type")
  isEquipped         Boolean       @default(false) @map("is_equipped")
  acquiredAt         DateTime      @default(now()) @map("acquired_at")

  // Relaciones
  studentCharacter StudentCharacter @relation(fields: [studentCharacterId], references: [id], onDelete: Cascade)
  accessory        Accessory        @relation(fields: [accessoryId], references: [id], onDelete: Cascade)

  @@id([studentCharacterId, accessoryId])
  @@map("student_accessories")
}

// Modelo de selecciones aleatorias
model RandomSelection {
  id                 String          @id @default(uuid())
  classId            String          @map("class_id")
  teacherId          String          @map("teacher_id")
  studentCharacterId String          @map("student_character_id")
  selectionType      SelectionType   @map("selection_type")
  selectionMethod    SelectionMethod @map("selection_method")
  result             String?
  experienceAwarded  Int             @default(0) @map("experience_awarded")
  lightAwarded       Int             @default(0) @map("light_awarded")
  selectedAt         DateTime        @default(now()) @map("selected_at")
  resolvedAt         DateTime?       @map("resolved_at")

  // Relaciones
  class            Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher          Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  studentCharacter StudentCharacter @relation(fields: [studentCharacterId], references: [id], onDelete: Cascade)

  @@map("random_selections")
}
model UserCharacter {
  id                   String   @id @default(uuid())
  userId               String   @map("user_id")
  characterTypeId      String   @map("character_type_id")
  characterName        String   @map("character_name")
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relaciones
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  characterType   CharacterType @relation(fields: [characterTypeId], references: [id])
  
  @@map("user_characters")
}

